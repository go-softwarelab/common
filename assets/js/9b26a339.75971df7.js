"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3465:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"seq2/README","title":"seq2","description":"Append","source":"@site/docs/seq2/README.md","sourceDirName":"seq2","slug":"/seq2/","permalink":"/common/docs/seq2/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"seq","permalink":"/common/docs/seq/"}}');var a=s(4848),i=s(8453);const r={},c="seq2",l={},u=[{value:"Append",id:"append",level:2},{value:"Collect",id:"collect",level:2},{value:"Concat",id:"concat",level:2},{value:"Contains",id:"contains",level:2},{value:"ContainsAll",id:"containsall",level:2},{value:"ContainsAllValues",id:"containsallvalues",level:2},{value:"ContainsPair",id:"containspair",level:2},{value:"ContainsValue",id:"containsvalue",level:2},{value:"Count",id:"count",level:2},{value:"Cycle",id:"cycle",level:2},{value:"Distinct",id:"distinct",level:2},{value:"DistinctKeys",id:"distinctkeys",level:2},{value:"Each",id:"each",level:2},{value:"Empty",id:"empty",level:2},{value:"Every",id:"every",level:2},{value:"Exists",id:"exists",level:2},{value:"Filter",id:"filter",level:2},{value:"FilterByKey",id:"filterbykey",level:2},{value:"FilterByValue",id:"filterbyvalue",level:2},{value:"Find",id:"find",level:2},{value:"FindAll",id:"findall",level:2},{value:"FindByKey",id:"findbykey",level:2},{value:"FindByValue",id:"findbyvalue",level:2},{value:"FindLast",id:"findlast",level:2},{value:"Flush",id:"flush",level:2},{value:"FoldKeys",id:"foldkeys",level:2},{value:"FoldKeysRight",id:"foldkeysright",level:2},{value:"FoldValues",id:"foldvalues",level:2},{value:"FoldValuesRight",id:"foldvaluesright",level:2},{value:"ForEach",id:"foreach",level:2},{value:"FromMap",id:"frommap",level:2},{value:"FromSlice",id:"fromslice",level:2},{value:"Get",id:"get",level:2},{value:"IsEmpty",id:"isempty",level:2},{value:"IsNotEmpty",id:"isnotempty",level:2},{value:"Keys",id:"keys",level:2},{value:"Limit",id:"limit",level:2},{value:"Map",id:"map",level:2},{value:"MapKeys",id:"mapkeys",level:2},{value:"MapPairs",id:"mappairs",level:2},{value:"MapTo",id:"mapto",level:2},{value:"MapToValues",id:"maptovalues",level:2},{value:"MapValues",id:"mapvalues",level:2},{value:"MaxKey",id:"maxkey",level:2},{value:"MaxValue",id:"maxvalue",level:2},{value:"MinKey",id:"minkey",level:2},{value:"MinValue",id:"minvalue",level:2},{value:"Narrow",id:"narrow",level:2},{value:"None",id:"none",level:2},{value:"NotContains",id:"notcontains",level:2},{value:"NotContainsPair",id:"notcontainspair",level:2},{value:"NotContainsValue",id:"notcontainsvalue",level:2},{value:"Of",id:"of",level:2},{value:"Offset",id:"offset",level:2},{value:"Pair",id:"pair",level:2},{value:"Prepend",id:"prepend",level:2},{value:"Reduce",id:"reduce",level:2},{value:"ReduceRight",id:"reduceright",level:2},{value:"Repeat",id:"repeat",level:2},{value:"Reverse",id:"reverse",level:2},{value:"Skip",id:"skip",level:2},{value:"SkipUntil",id:"skipuntil",level:2},{value:"SkipWhile",id:"skipwhile",level:2},{value:"Sort",id:"sort",level:2},{value:"SortBy",id:"sortby",level:2},{value:"SortComparingKeys",id:"sortcomparingkeys",level:2},{value:"SortComparingValues",id:"sortcomparingvalues",level:2},{value:"Split",id:"split",level:2},{value:"Take",id:"take",level:2},{value:"TakeUntil",id:"takeuntil",level:2},{value:"TakeWhile",id:"takewhile",level:2},{value:"Tap",id:"tap",level:2},{value:"Tick",id:"tick",level:2},{value:"ToMap",id:"tomap",level:2},{value:"UnZip",id:"unzip",level:2},{value:"Union",id:"union",level:2},{value:"UnionAll",id:"unionall",level:2},{value:"Uniq",id:"uniq",level:2},{value:"UniqBy",id:"uniqby",level:2},{value:"UniqByKeys",id:"uniqbykeys",level:2},{value:"UniqByValues",id:"uniqbyvalues",level:2},{value:"UniqKeys",id:"uniqkeys",level:2},{value:"UniqValues",id:"uniqvalues",level:2},{value:"Values",id:"values",level:2},{value:"Where",id:"where",level:2},{value:"WithIndex",id:"withindex",level:2},{value:"WithoutIndex",id:"withoutindex",level:2},{value:"type Consumer",id:"type-consumer",level:2},{value:"type DoubleMapper",id:"type-doublemapper",level:2},{value:"type KeyMapper",id:"type-keymapper",level:2},{value:"type KeyPredicate",id:"type-keypredicate",level:2},{value:"type Mapper",id:"type-mapper",level:2},{value:"type Predicate",id:"type-predicate",level:2},{value:"type Sequence",id:"type-sequence",level:2},{value:"AsSequence",id:"assequence",level:3},{value:"ConcatSequences",id:"concatsequences",level:3},{value:"Sequence[K, V].Append",id:"sequencek-vappend",level:3},{value:"Sequence[K, V].Collect",id:"sequencek-vcollect",level:3},{value:"Sequence[K, V].Contains",id:"sequencek-vcontains",level:3},{value:"Sequence[K, V].ContainsPair",id:"sequencek-vcontainspair",level:3},{value:"Sequence[K, V].ContainsValue",id:"sequencek-vcontainsvalue",level:3},{value:"Sequence[K, V].Count",id:"sequencek-vcount",level:3},{value:"Sequence[K, V].Cycle",id:"sequencek-vcycle",level:3},{value:"Sequence[K, V].Distinct",id:"sequencek-vdistinct",level:3},{value:"Sequence[K, V].Each",id:"sequencek-veach",level:3},{value:"Sequence[K, V].Every",id:"sequencek-vevery",level:3},{value:"Sequence[K, V].Exists",id:"sequencek-vexists",level:3},{value:"Sequence[K, V].Filter",id:"sequencek-vfilter",level:3},{value:"Sequence[K, V].FilterByKey",id:"sequencek-vfilterbykey",level:3},{value:"Sequence[K, V].FilterByValue",id:"sequencek-vfilterbyvalue",level:3},{value:"Sequence[K, V].Find",id:"sequencek-vfind",level:3},{value:"Sequence[K, V].FindAll",id:"sequencek-vfindall",level:3},{value:"Sequence[K, V].FindLast",id:"sequencek-vfindlast",level:3},{value:"Sequence[K, V].Flush",id:"sequencek-vflush",level:3},{value:"Sequence[K, V].FoldValues",id:"sequencek-vfoldvalues",level:3},{value:"Sequence[K, V].FoldValuesRight",id:"sequencek-vfoldvaluesright",level:3},{value:"Sequence[K, V].ForEach",id:"sequencek-vforeach",level:3},{value:"Sequence[K, V].Get",id:"sequencek-vget",level:3},{value:"Sequence[K, V].IsEmpty",id:"sequencek-visempty",level:3},{value:"Sequence[K, V].IsNotEmpty",id:"sequencek-visnotempty",level:3},{value:"Sequence[K, V].Keys",id:"sequencek-vkeys",level:3},{value:"Sequence[K, V].Limit",id:"sequencek-vlimit",level:3},{value:"Sequence[K, V].None",id:"sequencek-vnone",level:3},{value:"Sequence[K, V].NotContains",id:"sequencek-vnotcontains",level:3},{value:"Sequence[K, V].NotContainsPair",id:"sequencek-vnotcontainspair",level:3},{value:"Sequence[K, V].NotContainsValue",id:"sequencek-vnotcontainsvalue",level:3},{value:"Sequence[K, V].Offset",id:"sequencek-voffset",level:3},{value:"Sequence[K, V].Prepend",id:"sequencek-vprepend",level:3},{value:"Sequence[K, V].Repeat",id:"sequencek-vrepeat",level:3},{value:"Sequence[K, V].Reverse",id:"sequencek-vreverse",level:3},{value:"Sequence[K, V].Skip",id:"sequencek-vskip",level:3},{value:"Sequence[K, V].SortComparingKeys",id:"sequencek-vsortcomparingkeys",level:3},{value:"Sequence[K, V].SortComparingValues",id:"sequencek-vsortcomparingvalues",level:3},{value:"Sequence[K, V].Take",id:"sequencek-vtake",level:3},{value:"Sequence[K, V].Tap",id:"sequencek-vtap",level:3},{value:"Sequence[K, V].ToMap",id:"sequencek-vtomap",level:3},{value:"Sequence[K, V].Union",id:"sequencek-vunion",level:3},{value:"Sequence[K, V].UnionAll",id:"sequencek-vunionall",level:3},{value:"Sequence[K, V].Uniq",id:"sequencek-vuniq",level:3},{value:"Sequence[K, V].UniqKeys",id:"sequencek-vuniqkeys",level:3},{value:"Sequence[K, V].UniqValues",id:"sequencek-vuniqvalues",level:3},{value:"Sequence[K, V].Values",id:"sequencek-vvalues",level:3},{value:"Sequence[K, V].Where",id:"sequencek-vwhere",level:3},{value:"type ValueMapper",id:"type-valuemapper",level:2},{value:"type ValuePredicate",id:"type-valuepredicate",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"seq2",children:"seq2"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'import "github.com/go-softwarelab/common/pkg/seq2"\n'})}),"\n",(0,a.jsx)("a",{name:"Append"}),"\n",(0,a.jsx)(n.h2,{id:"append",children:"Append"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Append[K any, V any](seq iter.Seq2[K, V], key K, value V) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Append appends element to the end of a sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2})\n\tinput = seq2.Sort(input)\n\n\t// Append a new key-value pair to the sequence\n\tappended := seq2.Append(input, "c", 3)\n\n\tresult := seq2.Collect(appended)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Collect"}),"\n",(0,a.jsx)(n.h2,{id:"collect",children:"Collect"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Collect[K comparable, V any](seq iter.Seq2[K, V]) map[K]V\n"})}),"\n",(0,a.jsx)(n.p,{children:"Collect collects the elements of the given sequence into a map."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\tresult := seq2.Collect(input)\n\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Concat"}),"\n",(0,a.jsx)(n.h2,{id:"concat",children:"Concat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Concat[K any, V any](sequences ...iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Concat concatenates multiple sequences into a single sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tfirst := seq2.FromMap(map[string]int{"a": 1, "b": 2})\n\tfirst = seq2.Sort(first)\n\tsecond := seq2.FromMap(map[string]int{"c": 3, "d": 4})\n\tsecond = seq2.Sort(second)\n\n\t// Concatenate two sequences\n\tcombined := seq2.Concat(first, second)\n\n\tresult := seq2.Collect(combined)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3 d:4]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Contains"}),"\n",(0,a.jsx)(n.h2,{id:"contains",children:"Contains"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Contains[K comparable, V any](seq iter.Seq2[K, V], key K) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"Contains returns true if the key is in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tcontains := seq2.Contains(input, "b")\n\n\tfmt.Println(contains)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"ContainsAll"}),"\n",(0,a.jsx)(n.h2,{id:"containsall",children:"ContainsAll"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ContainsAll[K comparable, V any](seq iter.Seq2[K, V], keys ...K) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"ContainsAll returns true if all keys are in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tcontainsAll := seq2.ContainsAll(input, "a", "c", "d")\n\n\tfmt.Println(containsAll)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"ContainsAllValues"}),"\n",(0,a.jsx)(n.h2,{id:"containsallvalues",children:"ContainsAllValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ContainsAllValues[K any, V comparable](seq iter.Seq2[K, V], values ...V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"ContainsAllValues returns true if all values are in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tcontainsAllValues := seq2.ContainsAllValues(input, 1, 3)\n\n\tfmt.Println(containsAllValues)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"ContainsPair"}),"\n",(0,a.jsx)(n.h2,{id:"containspair",children:"ContainsPair"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ContainsPair[K comparable, V comparable](seq iter.Seq2[K, V], key K, value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"ContainsPair returns true if the key-value pair is in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tcontainsPair := seq2.ContainsPair(input, "b", 2)\n\n\tfmt.Println(containsPair)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"ContainsValue"}),"\n",(0,a.jsx)(n.h2,{id:"containsvalue",children:"ContainsValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ContainsValue[K any, V comparable](seq iter.Seq2[K, V], value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"ContainsValue returns true if the value is in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tcontainsValue := seq2.ContainsValue(input, 3)\n\n\tfmt.Println(containsValue)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"Count"}),"\n",(0,a.jsx)(n.h2,{id:"count",children:"Count"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Count[K any, V any](seq iter.Seq2[K, V]) int\n"})}),"\n",(0,a.jsx)(n.p,{children:"Count returns the number of elements in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Count returns the number of elements in the sequence\n\tcount := seq2.Count(input)\n\n\tfmt.Println(count)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"3\n"})})]}),"\n",(0,a.jsx)("a",{name:"Cycle"}),"\n",(0,a.jsx)(n.h2,{id:"cycle",children:"Cycle"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Cycle[K, V any](seq iter.Seq2[K, V], count int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Cycle repeats the sequence count times."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2})\n\tinput = seq2.Sort(input)\n\n\t// Repeat the sequence 2 times\n\tcycled := seq2.Cycle(input, 2)\n\n\tseq2.ForEach(cycled, func(k string, v int) {\n\t\tfmt.Println(k, v)\n\t})\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a 1\nb 2\na 1\nb 2\n"})})]}),"\n",(0,a.jsx)("a",{name:"Distinct"}),"\n",(0,a.jsx)(n.h2,{id:"distinct",children:"Distinct"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Distinct[K comparable, V comparable](seq iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Distinct returns a new sequence that contains only the unique elements of the given sequence. SQL-like alias for Uniq."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence with duplicate key-value pairs\n\tinput := seq2.Concat(\n\t\tseq2.FromMap(map[string]int{"a": 1, "b": 2}),\n\t\tseq2.FromMap(map[string]int{"a": 1, "c": 3}),\n\t)\n\n\t// Distinct is an alias for Uniq\n\tunique := seq2.Distinct(input)\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"DistinctKeys"}),"\n",(0,a.jsx)(n.h2,{id:"distinctkeys",children:"DistinctKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func DistinctKeys[K comparable, V any](seq iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"DistinctKeys returns a new sequence that contains only the unique keys of the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence with duplicate keys\n\tinput := seq2.Concat(\n\t\tseq2.FromMap(map[string]int{"a": 1, "b": 2}),\n\t\tseq2.FromMap(map[string]int{"a": 3, "c": 4}),\n\t)\n\n\t// DistinctKeys is an alias for UniqKeys\n\tunique := seq2.DistinctKeys(input)\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:4]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Each"}),"\n",(0,a.jsx)(n.h2,{id:"each",children:"Each"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Each[K any, V any](seq iter.Seq2[K, V], consumer Consumer[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Each is an alias for Tap."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\ttapped := seq2.Each(input, func(k string, v int) {\n\t\tfmt.Printf("Each: %s -> %d\\n", k, v)\n\t})\n\n\tseq2.Flush(tapped)\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Each: a -> 1\nEach: b -> 2\nEach: c -> 3\n"})})]}),"\n",(0,a.jsx)("a",{name:"Empty"}),"\n",(0,a.jsx)(n.h2,{id:"empty",children:"Empty"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Empty[K, V any]() iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Empty returns an empty sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create an empty sequence\n\tempty := seq2.Empty[any, any]()\n\n\tseq2.ForEach(empty, func(any, any) {\n\t\tfmt.Println("Should not be called")\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{})})]}),"\n",(0,a.jsx)("a",{name:"Every"}),"\n",(0,a.jsx)(n.h2,{id:"every",children:"Every"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Every[K, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"Every returns true if all elements satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 2, "b": 4, "c": 6, "d": 8})\n\tinput = seq2.Sort(input)\n\n\tevery := seq2.Every(input, func(k string, v int) bool {\n\t\treturn v%2 == 0\n\t})\n\n\tfmt.Println(every)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"Exists"}),"\n",(0,a.jsx)(n.h2,{id:"exists",children:"Exists"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Exists[K, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"Exists returns true if there is at least one element that satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\texists := seq2.Exists(input, func(k string, v int) bool {\n\t\treturn k > "c" && v > 3\n\t})\n\n\tfmt.Println(exists)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"Filter"}),"\n",(0,a.jsx)(n.h2,{id:"filter",children:"Filter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Filter[K any, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Filter returns a new sequence that contains only the elements that satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\t// Filter elements where the value is even\n\tfiltered := seq2.Filter(input, func(k string, v int) bool {\n\t\treturn v%2 == 0\n\t})\n\n\tresult := seq2.Collect(filtered)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[b:2 d:4]\n"})})]}),"\n",(0,a.jsx)("a",{name:"FilterByKey"}),"\n",(0,a.jsx)(n.h2,{id:"filterbykey",children:"FilterByKey"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FilterByKey[K any, V any](seq iter.Seq2[K, V], predicate KeyPredicate[K]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FilterByKey returns a new sequence that contains only the elements that satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\t// Filter elements by key\n\tfiltered := seq2.FilterByKey(input, func(k string) bool {\n\t\treturn k > "b"\n\t})\n\n\tresult := seq2.Collect(filtered)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[c:3 d:4]\n"})})]}),"\n",(0,a.jsx)("a",{name:"FilterByValue"}),"\n",(0,a.jsx)(n.h2,{id:"filterbyvalue",children:"FilterByValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FilterByValue[K any, V any](seq iter.Seq2[K, V], predicate ValuePredicate[V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FilterByValue returns a new sequence that contains only the elements that satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\t// Filter elements by value\n\tfiltered := seq2.FilterByValue(input, func(v int) bool {\n\t\treturn v <= 2\n\t})\n\n\tresult := seq2.Collect(filtered)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Find"}),"\n",(0,a.jsx)(n.h2,{id:"find",children:"Find"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Find[K, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) (optional.Elem[K], optional.Elem[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"Find returns the first element that satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tk, v := seq2.Find(input, func(k string, v int) bool {\n\t\treturn v > 2\n\t})\n\n\tfmt.Printf("Key: %s, Value: %d\\n", k.MustGet(), v.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Key: c, Value: 3\n"})})]}),"\n",(0,a.jsx)("a",{name:"FindAll"}),"\n",(0,a.jsx)(n.h2,{id:"findall",children:"FindAll"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FindAll[K, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FindAll returns all elements that satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tfound := seq2.FindAll(input, func(k string, v int) bool {\n\t\treturn v > 2\n\t})\n\n\tresult := seq2.Collect(found)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[c:3 d:4]\n"})})]}),"\n",(0,a.jsx)("a",{name:"FindByKey"}),"\n",(0,a.jsx)(n.h2,{id:"findbykey",children:"FindByKey"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FindByKey[K, V any](seq iter.Seq2[K, V], predicate KeyPredicate[K]) (optional.Elem[K], optional.Elem[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"FindByKey returns the first element that satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tk, v := seq2.FindByKey(input, func(k string) bool {\n\t\treturn strings.ToUpper(k) == "B"\n\t})\n\n\tfmt.Printf("Key: %s, Value: %d\\n", k.MustGet(), v.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Key: b, Value: 2\n"})})]}),"\n",(0,a.jsx)("a",{name:"FindByValue"}),"\n",(0,a.jsx)(n.h2,{id:"findbyvalue",children:"FindByValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FindByValue[K, V any](seq iter.Seq2[K, V], predicate ValuePredicate[V]) (optional.Elem[K], optional.Elem[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"FindByValue returns the first element that satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tk, v := seq2.FindByValue(input, func(v int) bool {\n\t\treturn v%4 == 0\n\t})\n\n\tfmt.Printf("Key: %s, Value: %d\\n", k.MustGet(), v.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Key: d, Value: 4\n"})})]}),"\n",(0,a.jsx)("a",{name:"FindLast"}),"\n",(0,a.jsx)(n.h2,{id:"findlast",children:"FindLast"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FindLast[K, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) (optional.Elem[K], optional.Elem[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"FindLast returns the last element that satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tk, v := seq2.FindLast(input, func(k string, v int) bool {\n\t\treturn v > 2\n\t})\n\n\tfmt.Printf("Key: %s, Value: %d\\n", k.MustGet(), v.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Key: d, Value: 4\n"})})]}),"\n",(0,a.jsx)("a",{name:"Flush"}),"\n",(0,a.jsx)(n.h2,{id:"flush",children:"Flush"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Flush[K any, V any](seq iter.Seq2[K, V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"Flush consumes all elements of the input sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"iter"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence that has side effects when consumed\n\tsideEffects := iter.Seq2[string, int](func(yield func(string, int) bool) {\n\t\tfmt.Println("First element consumed")\n\t\tif !yield("a", 1) {\n\t\t\treturn\n\t\t}\n\t\tfmt.Println("Second element consumed")\n\t\tif !yield("b", 2) {\n\t\t\treturn\n\t\t}\n\t\tfmt.Println("Third element consumed")\n\t\tif !yield("c", 3) {\n\t\t\treturn\n\t\t}\n\t})\n\n\t// Flush consumes all elements without doing anything with them\n\tseq2.Flush(sideEffects)\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"First element consumed\nSecond element consumed\nThird element consumed\n"})})]}),"\n",(0,a.jsx)("a",{name:"FoldKeys"}),"\n",(0,a.jsx)(n.h2,{id:"foldkeys",children:"FoldKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FoldKeys[K any, V any](seq2 iter.Seq2[K, V], accumulator func(agg K, key K, value V) K) optional.Elem[K]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FoldKeys applies a function against an accumulator and each element in the sequence (from left to right) to reduce it to a single value. Notice: first value will be omitted and the first key will be used as initial value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// FoldKeys concatenates all keys starting with the first key\n\tresult := seq2.FoldKeys(input, func(agg string, key string, value int) string {\n\t\treturn agg + key\n\t})\n\n\tfmt.Println(result.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"abc\n"})})]}),"\n",(0,a.jsx)("a",{name:"FoldKeysRight"}),"\n",(0,a.jsx)(n.h2,{id:"foldkeysright",children:"FoldKeysRight"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FoldKeysRight[K any, V any](seq2 iter.Seq2[K, V], accumulator func(agg K, key K, value V) K) optional.Elem[K]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FoldKeysRight applies a function against an accumulator and each element in the sequence (from right to left) to reduce it to a single value. Notice: last value will be omitted and the last key will be used as initial value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// FoldKeysRight concatenates all keys starting from the right\n\tresult := seq2.FoldKeysRight(input, func(agg string, key string, value int) string {\n\t\treturn agg + key\n\t})\n\n\tfmt.Println(result.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"cba\n"})})]}),"\n",(0,a.jsx)("a",{name:"FoldValues"}),"\n",(0,a.jsx)(n.h2,{id:"foldvalues",children:"FoldValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FoldValues[K any, V any](seq2 iter.Seq2[K, V], accumulator func(agg V, key K, value V) V) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FoldValues applies a function against an accumulator and each element in the sequence (from left to right) to reduce it to a single value. Notice: first key will be omitted and the first value will be used as initial value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// FoldValues to calculate the product of all values\n\tproduct := seq2.FoldValues(input, func(agg int, key string, value int) int {\n\t\treturn agg * value\n\t})\n\n\tfmt.Println(product.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"6\n"})})]}),"\n",(0,a.jsx)("a",{name:"FoldValuesRight"}),"\n",(0,a.jsx)(n.h2,{id:"foldvaluesright",children:"FoldValuesRight"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FoldValuesRight[K any, V any](seq2 iter.Seq2[K, V], accumulator func(agg V, key K, value V) V) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FoldValuesRight applies a function against an accumulator and each element in the sequence (from right to left) to reduce it to a single value. Notice: last key will be omitted and the last value will be used as initial value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 3, "b": 5, "c": 10})\n\tinput = seq2.Sort(input)\n\n\t// FoldValuesRight performs right-to-left division\n\tresult := seq2.FoldValuesRight(input, func(agg int, key string, value int) int {\n\t\treturn agg - value\n\t})\n\n\tfmt.Println(result.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"2\n"})})]}),"\n",(0,a.jsx)("a",{name:"ForEach"}),"\n",(0,a.jsx)(n.h2,{id:"foreach",children:"ForEach"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ForEach[K any, V any](seq iter.Seq2[K, V], consumer Consumer[K, V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"ForEach applies consumer to each element of the input sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of("a", "b", "c")\n\n\t// ForEach consumes the sequence and applies the function\n\tseq2.ForEach(input, func(k int, v string) {\n\t\tfmt.Printf("%d: %s\\n", k, v)\n\t})\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0: a\n1: b\n2: c\n"})})]}),"\n",(0,a.jsx)("a",{name:"FromMap"}),"\n",(0,a.jsx)(n.h2,{id:"frommap",children:"FromMap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FromMap[Map ~map[K]V, K comparable, V any](m Map) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FromMap creates a new iter.Seq2 from the given map."}),"\n",(0,a.jsx)("a",{name:"FromSlice"}),"\n",(0,a.jsx)(n.h2,{id:"fromslice",children:"FromSlice"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func FromSlice[Slice ~[]E, E any](slice Slice) iter.Seq2[int, E]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FromSlice creates a new sequence from the given slice with index as keys."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence from a slice\n\tslice := []string{"a", "b", "c"}\n\tsequence := seq2.FromSlice(slice)\n\n\tresult := seq2.Collect(sequence)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[0:a 1:b 2:c]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Get"}),"\n",(0,a.jsx)(n.h2,{id:"get",children:"Get"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Get[K comparable, V any](seq iter.Seq2[K, V], key K) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Get returns the element at the specified key."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tvalue := seq2.Get(input, "c")\n\n\tfmt.Println(value.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"3\n"})})]}),"\n",(0,a.jsx)("a",{name:"IsEmpty"}),"\n",(0,a.jsx)(n.h2,{id:"isempty",children:"IsEmpty"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func IsEmpty[K, V any](seq iter.Seq2[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"IsEmpty returns true if the sequence is empty."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\temptySeq := seq2.Empty[any, any]()\n\n\tnonEmptySeq := seq2.Of("a")\n\n\tfmt.Printf("Empty sequence: %v\\n", seq2.IsEmpty(emptySeq))\n\tfmt.Printf("Non-empty sequence: %v\\n", seq2.IsEmpty(nonEmptySeq))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Empty sequence: true\nNon-empty sequence: false\n"})})]}),"\n",(0,a.jsx)("a",{name:"IsNotEmpty"}),"\n",(0,a.jsx)(n.h2,{id:"isnotempty",children:"IsNotEmpty"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func IsNotEmpty[K, V any](seq iter.Seq2[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"IsNotEmpty returns true if the sequence is not empty."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\temptySeq := seq2.Empty[any, any]()\n\n\tnonEmptySeq := seq2.Of("a")\n\n\tfmt.Printf("Empty sequence: %v\\n", seq2.IsNotEmpty(emptySeq))\n\tfmt.Printf("Non-empty sequence: %v\\n", seq2.IsNotEmpty(nonEmptySeq))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Empty sequence: false\nNon-empty sequence: true\n"})})]}),"\n",(0,a.jsx)("a",{name:"Keys"}),"\n",(0,a.jsx)(n.h2,{id:"keys",children:"Keys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Keys[K, V any](seq iter.Seq2[K, V]) iter.Seq[K]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Keys returns a sequence of keys from a sequence of key-value pairs."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of("a", "b", "c")\n\n\tkeys := seq2.Keys(input)\n\n\tseq.ForEach(keys, func(k int) {\n\t\tfmt.Print(k, " ")\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0 1 2\n"})})]}),"\n",(0,a.jsx)("a",{name:"Limit"}),"\n",(0,a.jsx)(n.h2,{id:"limit",children:"Limit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Limit[K any, V any](seq iter.Seq2[K, V], n int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Limit returns a new sequence that contains only the first n elements of the given sequence. SQL-like alias for Take."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\t// Limit is an alias for Take\n\ttaken := seq2.Limit(input, 3)\n\n\tresult := seq2.Collect(taken)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Map"}),"\n",(0,a.jsx)(n.h2,{id:"map",children:"Map"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Map[K, V, RV any](seq iter.Seq2[K, V], mapper Mapper[K, V, RV]) iter.Seq2[K, RV]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Map applies a mapper function to each value of the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Map both key and value to produce a new value (keeps original keys)\n\tmapped := seq2.Map(input, func(k string, v int) string {\n\t\treturn fmt.Sprintf("Value of %s is %d", k, v)\n\t})\n\n\tresult := seq2.Collect(mapped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:Value of a is 1 b:Value of b is 2 c:Value of c is 3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"MapKeys"}),"\n",(0,a.jsx)(n.h2,{id:"mapkeys",children:"MapKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MapKeys[K, V, RK any](seq iter.Seq2[K, V], mapper KeyMapper[K, RK]) iter.Seq2[RK, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MapKeys applies a mapper function to each key of the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Map keys to uppercase (keeps original values)\n\tmapped := seq2.MapKeys(input, func(k string) string {\n\t\treturn strings.ToUpper(k)\n\t})\n\n\tresult := seq2.Collect(mapped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[A:1 B:2 C:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"MapPairs"}),"\n",(0,a.jsx)(n.h2,{id:"mappairs",children:"MapPairs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MapPairs[K, V, RK, RV any](seq iter.Seq2[K, V], mapper DoubleMapper[K, V, RK, RV]) iter.Seq2[RK, RV]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MapPairs applies a mapper function to each element of the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Map keys to uppercase and multiply values by 10\n\tmapped := seq2.MapPairs(input, func(k string, v int) (string, int) {\n\t\treturn strings.ToUpper(k), v * 10\n\t})\n\n\tresult := seq2.Collect(mapped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[A:10 B:20 C:30]\n"})})]}),"\n",(0,a.jsx)("a",{name:"MapTo"}),"\n",(0,a.jsx)(n.h2,{id:"mapto",children:"MapTo"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MapTo[K, V, RV any](seq iter.Seq2[K, V], mapper Mapper[K, V, RV]) iter.Seq[RV]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MapTo applies a mapper function to each element of the sequence and returns a sequence of mapper results."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Map each key-value pair to a string\n\tmapped := seq2.MapTo(input, func(k string, v int) string {\n\t\treturn fmt.Sprintf("%s=%d", k, v)\n\t})\n\n\tseq.ForEach(mapped, func(v string) {\n\t\tfmt.Println(v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a=1\nb=2\nc=3\n"})})]}),"\n",(0,a.jsx)("a",{name:"MapToValues"}),"\n",(0,a.jsx)(n.h2,{id:"maptovalues",children:"MapToValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MapToValues[K, V, RV any](seq iter.Seq2[K, V], mapper ValueMapper[V, RV]) iter.Seq[RV]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MapToValues applies a mapper function to each value of the sequence and returns a sequence of values only."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of("a", "b", "c")\n\n\t// Map values to strings and return as sequence of values\n\tmapped := seq2.MapToValues(input, func(v string) string {\n\t\treturn fmt.Sprintf("Value: %s", v)\n\t})\n\n\tfor v := range mapped {\n\t\tfmt.Println(v)\n\t}\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Value: a\nValue: b\nValue: c\n"})})]}),"\n",(0,a.jsx)("a",{name:"MapValues"}),"\n",(0,a.jsx)(n.h2,{id:"mapvalues",children:"MapValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MapValues[K, V, RV any](seq iter.Seq2[K, V], mapper ValueMapper[V, RV]) iter.Seq2[K, RV]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MapValues applies a mapper function to each value of the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Map values to their squares (keeps original keys)\n\tmapped := seq2.MapValues(input, func(v int) int {\n\t\treturn v * v\n\t})\n\n\tresult := seq2.Collect(mapped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:4 c:9]\n"})})]}),"\n",(0,a.jsx)("a",{name:"MaxKey"}),"\n",(0,a.jsx)(n.h2,{id:"maxkey",children:"MaxKey"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MaxKey[K types.Ordered, V any](seq2 iter.Seq2[K, V]) optional.Elem[K]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MaxKey returns the maximum key in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 5, "z": 10, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Find the maximum key (lexicographically)\n\tmaxK := seq2.MaxKey(input)\n\n\tfmt.Println(maxK.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"z\n"})})]}),"\n",(0,a.jsx)("a",{name:"MaxValue"}),"\n",(0,a.jsx)(n.h2,{id:"maxvalue",children:"MaxValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MaxValue[K any, V types.Ordered](seq2 iter.Seq2[K, V]) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MaxValue returns the maximum value in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 5, "b": 10, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Find the maximum value\n\tmaxV := seq2.MaxValue(input)\n\n\tfmt.Println(maxV.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"10\n"})})]}),"\n",(0,a.jsx)("a",{name:"MinKey"}),"\n",(0,a.jsx)(n.h2,{id:"minkey",children:"MinKey"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MinKey[K types.Ordered, V any](seq2 iter.Seq2[K, V]) optional.Elem[K]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MinKey returns the minimum key in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 5, "z": 10, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Find the minimum key (lexicographically)\n\tminK := seq2.MinKey(input)\n\n\tfmt.Println(minK.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a\n"})})]}),"\n",(0,a.jsx)("a",{name:"MinValue"}),"\n",(0,a.jsx)(n.h2,{id:"minvalue",children:"MinValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func MinValue[K any, V types.Ordered](seq2 iter.Seq2[K, V]) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"MinValue returns the minimum value in the ."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 5, "b": 10, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Find the minimum value\n\tminV := seq2.MinValue(input)\n\n\tfmt.Println(minV.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"3\n"})})]}),"\n",(0,a.jsx)("a",{name:"Narrow"}),"\n",(0,a.jsx)(n.h2,{id:"narrow",children:"Narrow"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Narrow[K, V, RV any](seq iter.Seq2[K, V], mapper Mapper[K, V, RV]) iter.Seq[RV]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Narrow applies a mapper function to each element of the sequence and returns a sequence of mapper results. Alias for MapTo"}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Narrow is an alias for MapTo\n\tmapped := seq2.Narrow(input, func(k string, v int) string {\n\t\treturn fmt.Sprintf("%s=%d", k, v)\n\t})\n\n\tseq.ForEach(mapped, func(v string) {\n\t\tfmt.Println(v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a=1\nb=2\nc=3\n"})})]}),"\n",(0,a.jsx)("a",{name:"None"}),"\n",(0,a.jsx)(n.h2,{id:"none",children:"None"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func None[K, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"None returns true if no element satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tnone := seq2.None(input, func(k string, v int) bool {\n\t\treturn v > 10\n\t})\n\n\tfmt.Println(none)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"NotContains"}),"\n",(0,a.jsx)(n.h2,{id:"notcontains",children:"NotContains"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func NotContains[K comparable, V any](seq iter.Seq2[K, V], key K) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"NotContains returns true if the key is not in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tnotContains := seq2.NotContains(input, "x")\n\n\tfmt.Println(notContains)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"NotContainsPair"}),"\n",(0,a.jsx)(n.h2,{id:"notcontainspair",children:"NotContainsPair"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func NotContainsPair[K comparable, V comparable](seq iter.Seq2[K, V], key K, value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"NotContainsPair returns true if the key-value pair is not in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tnotContainsPair := seq2.NotContainsPair(input, "b", 3)\n\n\tfmt.Println(notContainsPair)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"NotContainsValue"}),"\n",(0,a.jsx)(n.h2,{id:"notcontainsvalue",children:"NotContainsValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func NotContainsValue[K any, V comparable](seq iter.Seq2[K, V], value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"NotContainsValue returns true if the value is not in the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\tnotContainsValue := seq2.NotContainsValue(input, 5)\n\n\tfmt.Println(notContainsValue)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"true\n"})})]}),"\n",(0,a.jsx)("a",{name:"Of"}),"\n",(0,a.jsx)(n.h2,{id:"of",children:"Of"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Of[E any](elems ...E) iter.Seq2[int, E]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Of creates a new indexed sequence from the given elements."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence from individual elements\n\tindexed := seq2.Of(1, 2, 3)\n\n\tresult := seq2.Collect(indexed)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[0:1 1:2 2:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Offset"}),"\n",(0,a.jsx)(n.h2,{id:"offset",children:"Offset"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Offset[K any, V any](seq iter.Seq2[K, V], n int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Offset returns a new sequence that skips the first n elements of the given sequence. SQL-like alias for Skip."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of(10, 20, 30, 40, 20)\n\n\t// Skip the first 2 elements\n\tskipped := seq2.Offset(input, 2)\n\n\tresult := seq2.Collect(skipped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[2:30 3:40 4:20]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Pair"}),"\n",(0,a.jsx)(n.h2,{id:"pair",children:"Pair"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Pair[K, V any](k K, v V) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pair returns a sequence with given key value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence with a single key-value pair\n\tsingle := seq2.Pair("key", 42)\n\n\tseq2.ForEach(single, func(k string, v int) {\n\t\tfmt.Println(k, ":", v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"key : 42\n"})})]}),"\n",(0,a.jsx)("a",{name:"Prepend"}),"\n",(0,a.jsx)(n.h2,{id:"prepend",children:"Prepend"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Prepend[K any, V any](seq iter.Seq2[K, V], key K, value V) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Prepend prepends element to the beginning of a sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Prepend a new key-value pair to the sequence\n\tprepended := seq2.Prepend(input, "a", 1)\n\n\tresult := seq2.Collect(prepended)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Reduce"}),"\n",(0,a.jsx)(n.h2,{id:"reduce",children:"Reduce"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Reduce[K any, V any, R any](seq2 iter.Seq2[K, V], accumulator func(agg R, key K, value V) R, initial R) R\n"})}),"\n",(0,a.jsx)(n.p,{children:"Reduce applies a function against an accumulator and each element in the sequence (from left to right) to reduce it to a single value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\ttype Reduced struct {\n\t\tKey   string\n\t\tValue int\n\t}\n\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Reduce to calculate the sum of all values\n\treduced := seq2.Reduce(input, func(agg Reduced, key string, value int) Reduced {\n\t\treturn Reduced{\n\t\t\tKey:   agg.Key + key,\n\t\t\tValue: agg.Value + value,\n\t\t}\n\t}, Reduced{})\n\n\tfmt.Println(reduced)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{abc 6}\n"})})]}),"\n",(0,a.jsx)("a",{name:"ReduceRight"}),"\n",(0,a.jsx)(n.h2,{id:"reduceright",children:"ReduceRight"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ReduceRight[K any, V any, R any](seq2 iter.Seq2[K, V], accumulator func(agg R, key K, value V) R, initial R) R\n"})}),"\n",(0,a.jsx)(n.p,{children:"ReduceRight applies a function against an accumulator and each element in the sequence (from right to left) to reduce it to a single value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\ttype Reduced struct {\n\t\tKey   string\n\t\tValue int\n\t}\n\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Reduce to calculate the sum of all values\n\treduced := seq2.ReduceRight(input, func(agg Reduced, key string, value int) Reduced {\n\t\treturn Reduced{\n\t\t\tKey:   agg.Key + key,\n\t\t\tValue: agg.Value + value,\n\t\t}\n\t}, Reduced{})\n\n\tfmt.Println(reduced)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{cba 6}\n"})})]}),"\n",(0,a.jsx)("a",{name:"Repeat"}),"\n",(0,a.jsx)(n.h2,{id:"repeat",children:"Repeat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Repeat[K any, V any](key K, value V, count int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Repeat repeats the given pair `count` times."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence that repeats a key-value pair 3 times\n\trepeated := seq2.Repeat("key", 42, 3)\n\n\tseq2.ForEach(repeated, func(k string, v int) {\n\t\tfmt.Println(k, ":", v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"key : 42\nkey : 42\nkey : 42\n"})})]}),"\n",(0,a.jsx)("a",{name:"Reverse"}),"\n",(0,a.jsx)(n.h2,{id:"reverse",children:"Reverse"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Reverse[K, V any](seq iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Reverse reverses the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create an indexed sequence\n\tsequence := seq2.Of("a", "b", "c")\n\n\t// Reverse it\n\treversed := seq2.Reverse(sequence)\n\n\t// Collect into pairs for ordered display\n\tvar pairs []string\n\tseq2.ForEach(reversed, func(k int, v string) {\n\t\tfmt.Println(k, ":", v)\n\t})\n\n\tfmt.Println(strings.Join(pairs, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"2 : c\n1 : b\n0 : a\n"})})]}),"\n",(0,a.jsx)("a",{name:"Skip"}),"\n",(0,a.jsx)(n.h2,{id:"skip",children:"Skip"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Skip[K any, V any](seq iter.Seq2[K, V], n int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Skip returns a new sequence that skips the first n elements of the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of(10, 20, 30, 40, 20)\n\n\t// Skip the first 2 elements\n\tskipped := seq2.Skip(input, 2)\n\n\tresult := seq2.Collect(skipped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[2:30 3:40 4:20]\n"})})]}),"\n",(0,a.jsx)("a",{name:"SkipUntil"}),"\n",(0,a.jsx)(n.h2,{id:"skipuntil",children:"SkipUntil"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func SkipUntil[K any, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"SkipUntil returns a new sequence that skips elements from the given sequence until the predicate is satisfied."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of(10, 20, 30, 40, 20)\n\n\t// Skip elements until value of 30 is reached\n\tskipped := seq2.SkipUntil(input, func(k int, v int) bool {\n\t\treturn v == 30\n\t})\n\n\tresult := seq2.Collect(skipped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[2:30 3:40 4:20]\n"})})]}),"\n",(0,a.jsx)("a",{name:"SkipWhile"}),"\n",(0,a.jsx)(n.h2,{id:"skipwhile",children:"SkipWhile"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func SkipWhile[K any, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"SkipWhile returns a new sequence that skips elements from the given sequence while the predicate is satisfied."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of(10, 20, 30, 40, 20)\n\n\t// Skip elements until the value is less than 30\n\tskipped := seq2.SkipWhile(input, func(k int, v int) bool {\n\t\treturn v < 30\n\t})\n\n\tresult := seq2.Collect(skipped)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[2:30 3:40 4:20]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sort"}),"\n",(0,a.jsx)(n.h2,{id:"sort",children:"Sort"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Sort[K types.Ordered, V any](seq iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sort sorts the elements of a sequence by key in ascending order."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Pair("a", 1)\n\tinput = seq2.Append(input, "c", 3)\n\tinput = seq2.Append(input, "b", 2)\n\n\t// Sort by keys (alphabetically)\n\tsorted := seq2.Sort(input)\n\n\tseq2.ForEach(sorted, func(k string, v int) {\n\t\tfmt.Println(k, ":", v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a : 1\nb : 2\nc : 3\n"})})]}),"\n",(0,a.jsx)("a",{name:"SortBy"}),"\n",(0,a.jsx)(n.h2,{id:"sortby",children:"SortBy"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func SortBy[K any, V any, R types.Ordered](seq iter.Seq2[K, V], mapper func(K, V) R) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"SortBy sorts the elements of a sequence by result of the mapper."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Pair("a", 1)\n\tinput = seq2.Append(input, "c", 3)\n\tinput = seq2.Append(input, "b", 2)\n\n\t// Sort by values\n\tsorted := seq2.SortBy(input, func(k string, v int) int {\n\t\treturn v\n\t})\n\n\tseq2.ForEach(sorted, func(k string, v int) {\n\t\tfmt.Println(k, ":", v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a : 1\nb : 2\nc : 3\n"})})]}),"\n",(0,a.jsx)("a",{name:"SortComparingKeys"}),"\n",(0,a.jsx)(n.h2,{id:"sortcomparingkeys",children:"SortComparingKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func SortComparingKeys[K any, V any](seq iter.Seq2[K, V], cmp func(K, K) int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"SortComparingKeys sorts the elements of a sequence by key in ascending order."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"cmp"\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Pair("a", 1)\n\tinput = seq2.Append(input, "c", 3)\n\tinput = seq2.Append(input, "b", 2)\n\n\t// Sort by keys in reverse order\n\tsorted := seq2.SortComparingKeys(input, func(a, b string) int {\n\t\treturn -cmp.Compare(a, b)\n\t})\n\n\tseq2.ForEach(sorted, func(k string, v int) {\n\t\tfmt.Println(k, ":", v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"c : 3\nb : 2\na : 1\n"})})]}),"\n",(0,a.jsx)("a",{name:"SortComparingValues"}),"\n",(0,a.jsx)(n.h2,{id:"sortcomparingvalues",children:"SortComparingValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func SortComparingValues[K any, V any](seq iter.Seq2[K, V], cmp func(V, V) int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"SortComparingValues sorts the elements of a sequence by value in ascending order."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"cmp"\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Unordered map with string keys\n\tinput := seq2.Pair("a", 1)\n\tinput = seq2.Append(input, "c", 3)\n\tinput = seq2.Append(input, "b", 2)\n\n\t// Sort by values in descending order\n\tsorted := seq2.SortComparingValues(input, func(a, b int) int {\n\t\treturn -cmp.Compare(a, b)\n\t})\n\n\tseq2.ForEach(sorted, func(k string, v int) {\n\t\tfmt.Println(k, ":", v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"c : 3\nb : 2\na : 1\n"})})]}),"\n",(0,a.jsx)("a",{name:"Split"}),"\n",(0,a.jsx)(n.h2,{id:"split",children:"Split"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Split[K any, V any](seq iter.Seq2[K, V]) (iter.Seq[K], iter.Seq[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"Split splits a sequence of pairs into two sequences."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// Split is an alias for UnZip\n\tkeys, values := seq2.Split(input)\n\n\tkeySlice := make([]string, 0)\n\tfor k := range keys {\n\t\tkeySlice = append(keySlice, k)\n\t}\n\tfmt.Printf("Keys: %v\\n", keySlice)\n\n\tvalueSlice := make([]int, 0)\n\tfor v := range values {\n\t\tvalueSlice = append(valueSlice, v)\n\t}\n\tfmt.Printf("Values: %v\\n", valueSlice)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Keys: [a b c]\nValues: [1 2 3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Take"}),"\n",(0,a.jsx)(n.h2,{id:"take",children:"Take"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Take[K any, V any](seq iter.Seq2[K, V], n int) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Take returns a new sequence that contains only the first n elements of the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\t// Take the first 2 elements\n\ttaken := seq2.Take(input, 2)\n\n\tresult := seq2.Collect(taken)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2]\n"})})]}),"\n",(0,a.jsx)("a",{name:"TakeUntil"}),"\n",(0,a.jsx)(n.h2,{id:"takeuntil",children:"TakeUntil"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func TakeUntil[K any, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"TakeUntil returns a new sequence that takes elements from the given sequence until the predicate is satisfied."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\t// Take elements until value is greater than 2\n\ttaken := seq2.TakeUntil(input, func(k string, v int) bool {\n\t\treturn v > 2\n\t})\n\n\tresult := seq2.Collect(taken)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2]\n"})})]}),"\n",(0,a.jsx)("a",{name:"TakeWhile"}),"\n",(0,a.jsx)(n.h2,{id:"takewhile",children:"TakeWhile"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func TakeWhile[K any, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"TakeWhile returns a new sequence that takes elements from the given sequence while the predicate is satisfied."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of("a", "b", "c", "d")\n\n\t// Take elements while value is less than 3\n\ttaken := seq2.TakeWhile(input, func(k int, v string) bool {\n\t\treturn v != "c"\n\t})\n\n\tresult := seq2.Collect(taken)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[0:a 1:b]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Tap"}),"\n",(0,a.jsx)(n.h2,{id:"tap",children:"Tap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Tap[K any, V any](seq iter.Seq2[K, V], consumer Consumer[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Tap returns a sequence that applies the given consumer to each element of the input sequence and pass it further."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\t// Ensure to have consistent output\n\tinput = seq2.Sort(input)\n\n\t// Use Tap to print key-value pairs while passing them through\n\ttapped := seq2.Tap(input, func(k string, v int) {\n\t\tfmt.Printf("Processing: %s => %d\\n", k, v)\n\t})\n\n\tseq2.Flush(tapped)\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Processing: a => 1\nProcessing: b => 2\nProcessing: c => 3\n"})})]}),"\n",(0,a.jsx)("a",{name:"Tick"}),"\n",(0,a.jsx)(n.h2,{id:"tick",children:"Tick"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Tick(d time.Duration) iter.Seq2[int, time.Time]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Tick returns a sequence that yields the tick number and the current time every duration."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"time"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tticker := seq2.Tick(1 * time.Millisecond)\n\n\tticker = seq2.Take(ticker, 5)\n\n\tseq2.ForEach(ticker, func(tick int, v time.Time) {\n\t\tfmt.Printf("tick %d at %s \\n", tick, v.Format("15:04:05.000"))\n\t})\n\n\t// Example Output:\n\t// tick 1 at 00:00:00.000\n\t// tick 2 at 00:00:00.001\n\t// tick 3 at 00:00:00.002\n\t// tick 4 at 00:00:00.003\n\t// tick 5 at 00:00:00.004\n}\n'})})]}),"\n",(0,a.jsx)("a",{name:"ToMap"}),"\n",(0,a.jsx)(n.h2,{id:"tomap",children:"ToMap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ToMap[Map ~map[K]V, K comparable, V any](seq iter.Seq2[K, V], m Map)\n"})}),"\n",(0,a.jsx)(n.p,{children:"ToMap collects the elements of the given sequence into a map."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\tresult := make(map[string]int, 3)\n\tseq2.ToMap(input, result)\n\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"UnZip"}),"\n",(0,a.jsx)(n.h2,{id:"unzip",children:"UnZip"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UnZip[K any, V any](seq iter.Seq2[K, V]) (iter.Seq[K], iter.Seq[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"UnZip splits a sequence of pairs into two sequences."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tinput = seq2.Sort(input)\n\n\t// UnZip splits a sequence into keys and values sequences\n\tkeys, values := seq2.UnZip(input)\n\n\tkeySlice := make([]string, 0)\n\tfor k := range keys {\n\t\tkeySlice = append(keySlice, k)\n\t}\n\tfmt.Printf("Keys: %v\\n", keySlice)\n\n\tvalueSlice := make([]int, 0)\n\tfor v := range values {\n\t\tvalueSlice = append(valueSlice, v)\n\t}\n\tfmt.Printf("Values: %v\\n", valueSlice)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Keys: [a b c]\nValues: [1 2 3]\n"})})]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example (After Zip)"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tnums := seq.Of(1, 2, 3)\n\tletters := seq.Of("a", "b", "c")\n\n\tzipped := seq.Zip(nums, letters)\n\n\tunzipped1, unzipped2 := seq2.UnZip(zipped)\n\n\tresult1 := seq.Collect(unzipped1)\n\tresult2 := seq.Collect(unzipped2)\n\n\tfmt.Println(result1)\n\tfmt.Println(result2)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"[1 2 3]\n[a b c]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Union"}),"\n",(0,a.jsx)(n.h2,{id:"union",children:"Union"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Union[K comparable, V comparable](seq1 iter.Seq2[K, V], seq2 iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Union returns a sequence that contains all distinct elements from both input sequences."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tfirst := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3})\n\tfirst = seq2.Sort(first)\n\tsecond := seq2.FromMap(map[string]int{"c": 3, "d": 4, "e": 5})\n\tsecond = seq2.Sort(second)\n\n\t// Union returns distinct elements from both sequences\n\tcombined := seq2.Union(first, second)\n\n\tresult := seq2.Collect(combined)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3 d:4 e:5]\n"})})]}),"\n",(0,a.jsx)("a",{name:"UnionAll"}),"\n",(0,a.jsx)(n.h2,{id:"unionall",children:"UnionAll"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UnionAll[K any, V any](seq1 iter.Seq2[K, V], seq2 iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UnionAll returns a sequence that contains all elements from both input sequences."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tfirst := seq2.FromMap(map[string]int{"a": 1, "b": 2})\n\tfirst = seq2.Sort(first)\n\tsecond := seq2.FromMap(map[string]int{"c": 3, "b": 2})\n\tsecond = seq2.Sort(second)\n\n\t// UnionAll is an alias for Concat\n\tcombined := seq2.UnionAll(first, second)\n\n\tresult := seq2.Collect(combined)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Uniq"}),"\n",(0,a.jsx)(n.h2,{id:"uniq",children:"Uniq"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Uniq[K comparable, V comparable](seq iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Uniq returns a new sequence that contains only the unique elements of the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence with duplicate key-value pairs\n\tinput := seq2.Concat(\n\t\tseq2.FromMap(map[string]int{"a": 1, "b": 2}),\n\t\tseq2.FromMap(map[string]int{"a": 1, "c": 3}),\n\t)\n\n\t// Get unique key-value pairs\n\tunique := seq2.Uniq(input)\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"UniqBy"}),"\n",(0,a.jsx)(n.h2,{id:"uniqby",children:"UniqBy"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UniqBy[K any, V any, K2 comparable](seq iter.Seq2[K, V], mapper Mapper[K, V, K2]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UniqBy returns a new sequence that contains only the unique elements of the given sequence based on a key."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strconv"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"apple": 1, "banana": 2, "apricot": 3, "berry": 4, "blueberry": 5})\n\tinput = seq2.Sort(input)\n\n\t// Get unique entries based on first letter and value modulo 2\n\tunique := seq2.UniqBy(input, func(k string, v int) string {\n\t\treturn string(k[0]) + strconv.Itoa(v%2)\n\t})\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[apple:1 banana:2 blueberry:5]\n"})})]}),"\n",(0,a.jsx)("a",{name:"UniqByKeys"}),"\n",(0,a.jsx)(n.h2,{id:"uniqbykeys",children:"UniqByKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UniqByKeys[K any, V any, K2 comparable](seq iter.Seq2[K, V], mapper KeyMapper[K, K2]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UniqByKeys returns a new sequence that contains only the unique elements of the given sequence based on a key."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"Apple": 1, "apricot": 2, "Banana": 3, "berry": 4})\n\tinput = seq2.Sort(input)\n\n\t// Get unique entries based on lowercase first letter of key\n\tunique := seq2.UniqByKeys(input, func(k string) string {\n\t\treturn strings.ToLower(string(k[0]))\n\t})\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[Apple:1 Banana:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"UniqByValues"}),"\n",(0,a.jsx)(n.h2,{id:"uniqbyvalues",children:"UniqByValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UniqByValues[K any, V any, V2 comparable](seq iter.Seq2[K, V], mapper ValueMapper[V, V2]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UniqByValues returns a new sequence that contains only the unique elements of the given sequence based on a key."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 10, "b": 21, "c": 30, "d": 44})\n\tinput = seq2.Sort(input)\n\n\t// Get unique entries based on value modulo 10\n\tunique := seq2.UniqByValues(input, func(v int) int {\n\t\treturn v % 10\n\t})\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:10 b:21 d:44]\n"})})]}),"\n",(0,a.jsx)("a",{name:"UniqKeys"}),"\n",(0,a.jsx)(n.h2,{id:"uniqkeys",children:"UniqKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UniqKeys[K comparable, V any](seq iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UniqKeys returns a new sequence that contains only the unique keys of the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence with duplicate keys\n\tinput := seq2.Concat(\n\t\tseq2.FromMap(map[string]int{"a": 1, "b": 2}),\n\t\tseq2.FromMap(map[string]int{"a": 3, "c": 4}),\n\t)\n\n\t// Get entries with unique keys (first occurrence wins)\n\tunique := seq2.UniqKeys(input)\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 c:4]\n"})})]}),"\n",(0,a.jsx)("a",{name:"UniqValues"}),"\n",(0,a.jsx)(n.h2,{id:"uniqvalues",children:"UniqValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UniqValues[K any, V comparable](seq iter.Seq2[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UniqValues returns a new sequence that contains only the unique values of the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a sequence with duplicate values\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 1, "d": 3})\n\tinput = seq2.Sort(input)\n\n\t// Get entries with unique values (first occurrence wins)\n\tunique := seq2.UniqValues(input)\n\n\tresult := seq2.Collect(unique)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[a:1 b:2 d:3]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Values"}),"\n",(0,a.jsx)(n.h2,{id:"values",children:"Values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Values[K, V any](seq iter.Seq2[K, V]) iter.Seq[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Values returns a sequence of values from a sequence of key-value pairs."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.Of("a", "b", "c")\n\n\tkeys := seq2.Values(input)\n\n\tseq.ForEach(keys, func(v string) {\n\t\tfmt.Print(v, " ")\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a b c\n"})})]}),"\n",(0,a.jsx)("a",{name:"Where"}),"\n",(0,a.jsx)(n.h2,{id:"where",children:"Where"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Where[K any, V any](seq iter.Seq2[K, V], predicate Predicate[K, V]) iter.Seq2[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Where returns a new sequence that contains only the elements that satisfy the predicate. SQL-like alias for Filter"}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tinput := seq2.FromMap(map[string]int{"a": 1, "b": 2, "c": 3, "d": 4})\n\tinput = seq2.Sort(input)\n\n\t// Where is an alias for Filter\n\tfiltered := seq2.Where(input, func(k string, v int) bool {\n\t\treturn v > 2\n\t})\n\n\tresult := seq2.Collect(filtered)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[c:3 d:4]\n"})})]}),"\n",(0,a.jsx)("a",{name:"WithIndex"}),"\n",(0,a.jsx)(n.h2,{id:"withindex",children:"WithIndex"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func WithIndex[E any](seq iter.Seq[E]) iter.Seq2[int, E]\n"})}),"\n",(0,a.jsx)(n.p,{children:"WithIndex creates a new indexed sequence from the given sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create a iter.Seq of values\n\tvalues := seq.Of("a", "b", "c")\n\n\t// Add indexes\n\tindexed := seq2.WithIndex(values)\n\n\tresult := seq2.Collect(indexed)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"map[0:a 1:b 2:c]\n"})})]}),"\n",(0,a.jsx)("a",{name:"WithoutIndex"}),"\n",(0,a.jsx)(n.h2,{id:"withoutindex",children:"WithoutIndex"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func WithoutIndex[E any](indexed iter.Seq2[int, E]) iter.Seq[E]\n"})}),"\n",(0,a.jsx)(n.p,{children:"WithoutIndex creates a new sequence from the given indexed sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Create an indexed sequence\n\tindexed := seq2.Of("a", "b", "c")\n\n\t// Remove indexes\n\tvalues := seq2.WithoutIndex(indexed)\n\n\tresult := seq.Collect(values)\n\tfmt.Println(result)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"[a b c]\n"})})]}),"\n",(0,a.jsx)("a",{name:"Consumer"}),"\n",(0,a.jsx)(n.h2,{id:"type-consumer",children:"type Consumer"}),"\n",(0,a.jsx)(n.p,{children:"Consumer is a function that consumes an element of an iter.Seq2."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type Consumer[K any, V any] = func(K, V)\n"})}),"\n",(0,a.jsx)("a",{name:"DoubleMapper"}),"\n",(0,a.jsx)(n.h2,{id:"type-doublemapper",children:"type DoubleMapper"}),"\n",(0,a.jsx)(n.p,{children:"DoubleMapper is a function that takes an element and returns a new sequence element."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type DoubleMapper[K, V, RK, RV any] = func(K, V) (RK, RV)\n"})}),"\n",(0,a.jsx)("a",{name:"KeyMapper"}),"\n",(0,a.jsx)(n.h2,{id:"type-keymapper",children:"type KeyMapper"}),"\n",(0,a.jsx)(n.p,{children:"KeyMapper is a function that takes Key a new Key."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type KeyMapper[K, R any] = func(K) R\n"})}),"\n",(0,a.jsx)("a",{name:"KeyPredicate"}),"\n",(0,a.jsx)(n.h2,{id:"type-keypredicate",children:"type KeyPredicate"}),"\n",(0,a.jsx)(n.p,{children:"KeyPredicate is a function that is used to filter by key."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type KeyPredicate[E any] = KeyMapper[E, bool]\n"})}),"\n",(0,a.jsx)("a",{name:"Mapper"}),"\n",(0,a.jsx)(n.h2,{id:"type-mapper",children:"type Mapper"}),"\n",(0,a.jsx)(n.p,{children:"Mapper is a function that takes an element and returns a new element."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type Mapper[K, V, R any] = func(K, V) R\n"})}),"\n",(0,a.jsx)("a",{name:"Predicate"}),"\n",(0,a.jsx)(n.h2,{id:"type-predicate",children:"type Predicate"}),"\n",(0,a.jsx)(n.p,{children:"Predicate is a function that takes an element and returns a boolean."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type Predicate[K any, V any] = Mapper[K, V, bool]\n"})}),"\n",(0,a.jsx)("a",{name:"Sequence"}),"\n",(0,a.jsx)(n.h2,{id:"type-sequence",children:"type Sequence"}),"\n",(0,a.jsx)(n.p,{children:"Sequence is a wrapper around iter.Seq2 that provides fluent API for seq2 operations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type Sequence[K comparable, V comparable] struct {\n    // contains filtered or unexported fields\n}\n"})}),"\n",(0,a.jsx)("a",{name:"AsSequence"}),"\n",(0,a.jsx)(n.h3,{id:"assequence",children:"AsSequence"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func AsSequence[K comparable, V comparable](seq iter.Seq2[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"AsSequence wraps an iter.Seq2 to provide a fluent API."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\tvar result []string\n\tsequence.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 1:b, 2:c\n"})})]}),"\n",(0,a.jsx)("a",{name:"ConcatSequences"}),"\n",(0,a.jsx)(n.h3,{id:"concatsequences",children:"ConcatSequences"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func ConcatSequences[K comparable, V comparable](sequences ...Sequence[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"ConcatSequences concatenates multiple sequences into a single sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsq1 := seq2.AsSequence(seq2.Of("a", "b"))\n\tsq2 := seq2.AsSequence(seq2.Of("c", "d"))\n\n\tconcatenated := seq2.ConcatSequences(sq1, sq2)\n\n\tconcatenated.ForEach(func(k int, v string) {\n\t\tfmt.Println(k, v)\n\t})\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0 a\n1 b\n0 c\n1 d\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Append"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vappend",children:"Sequence[K, V].Append"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Append(key K, value V) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Append appends a key-value pair to the end of a sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\tappended := sequence.Append(3, "d")\n\n\tvar result []string\n\tappended.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 1:b, 2:c, 3:d\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Collect"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vcollect",children:"Sequence[K, V].Collect"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Collect() map[K]V\n"})}),"\n",(0,a.jsx)(n.p,{children:"Collect collects the elements into a map."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Contains"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vcontains",children:"Sequence[K, V].Contains"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Contains(key K) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"Contains returns true if the sequence contains the key."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\tfmt.Println("Contains key 1:", sequence.Contains(1))\n\tfmt.Println("Contains key 5:", sequence.Contains(5))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Contains key 1: true\nContains key 5: false\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].ContainsPair"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vcontainspair",children:"Sequence[K, V].ContainsPair"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) ContainsPair(key K, value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"ContainsPair returns true if the sequence contains the key-value pair."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\tfmt.Println("Contains pair 1:\'b\':", sequence.ContainsPair(1, "b"))\n\tfmt.Println("Contains pair 1:\'c\':", sequence.ContainsPair(1, "c"))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Contains pair 1:'b': true\nContains pair 1:'c': false\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].ContainsValue"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vcontainsvalue",children:"Sequence[K, V].ContainsValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) ContainsValue(value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"ContainsValue returns true if the sequence contains the value."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\tfmt.Println("Contains value \'b\':", sequence.ContainsValue("b"))\n\tfmt.Println("Contains value \'z\':", sequence.ContainsValue("z"))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Contains value 'b': true\nContains value 'z': false\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Count"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vcount",children:"Sequence[K, V].Count"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Count() int\n"})}),"\n",(0,a.jsx)(n.p,{children:"Count returns the number of elements in the sequence."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Cycle"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vcycle",children:"Sequence[K, V].Cycle"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Cycle(count int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Cycle repeats the sequence the specified number of times."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b"))\n\tcycled := sequence.Cycle(2)\n\n\tvar result []string\n\tcycled.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 1:b, 0:a, 1:b\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Distinct"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vdistinct",children:"Sequence[K, V].Distinct"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Distinct() Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Distinct is an alias for Uniq."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Each"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-veach",children:"Sequence[K, V].Each"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Each(consumer Consumer[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Each is an alias for Tap."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Every"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vevery",children:"Sequence[K, V].Every"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Every(predicate Predicate[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"Every returns true if all elements satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\tallLowercase := sequence.Every(func(k int, v string) bool {\n\t\treturn v >= "a" && v <= "z"\n\t})\n\n\tallA := sequence.Every(func(k int, v string) bool {\n\t\treturn v == "a"\n\t})\n\n\tfmt.Println("All values lowercase:", allLowercase)\n\tfmt.Println("All values \'a\':", allA)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"All values lowercase: true\nAll values 'a': false\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Exists"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vexists",children:"Sequence[K, V].Exists"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Exists(predicate Predicate[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"Exists returns true if any element satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\thasValueB := sequence.Exists(func(k int, v string) bool {\n\t\treturn v == "b"\n\t})\n\n\tfmt.Println("Has value \'b\':", hasValueB)\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Has value 'b': true\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Filter"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfilter",children:"Sequence[K, V].Filter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Filter(predicate Predicate[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Filter returns a new sequence with elements that satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c", "d", "e"))\n\tfiltered := sequence.Filter(func(k int, v string) bool {\n\t\treturn k%2 == 0\n\t})\n\n\tvar result []string\n\tfiltered.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 2:c, 4:e\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].FilterByKey"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfilterbykey",children:"Sequence[K, V].FilterByKey"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) FilterByKey(predicate KeyPredicate[K]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FilterByKey returns a new sequence with elements whose keys satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c", "d", "e"))\n\tfiltered := sequence.FilterByKey(func(k int) bool {\n\t\treturn k > 2\n\t})\n\n\tvar result []string\n\tfiltered.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"3:d, 4:e\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].FilterByValue"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfilterbyvalue",children:"Sequence[K, V].FilterByValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) FilterByValue(predicate ValuePredicate[V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FilterByValue returns a new sequence with elements whose values satisfy the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c", "d", "e"))\n\tfiltered := sequence.FilterByValue(func(v string) bool {\n\t\treturn v > "c"\n\t})\n\n\tvar result []string\n\tfiltered.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"3:d, 4:e\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Find"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfind",children:"Sequence[K, V].Find"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Find(predicate Predicate[K, V]) (optional.Elem[K], optional.Elem[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"Find returns the first element that satisfies the predicate."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c", "d", "e"))\n\n\tkey, value := sequence.Find(func(k int, v string) bool {\n\t\treturn v == "c"\n\t})\n\n\tfmt.Printf("Key: %d, Value: %s\\n", key.MustGet(), value.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Key: 2, Value: c\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].FindAll"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfindall",children:"Sequence[K, V].FindAll"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) FindAll(predicate Predicate[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FindAll returns all elements that satisfy the predicate."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].FindLast"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfindlast",children:"Sequence[K, V].FindLast"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) FindLast(predicate Predicate[K, V]) (optional.Elem[K], optional.Elem[V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"FindLast returns the last element that satisfies the predicate."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Flush"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vflush",children:"Sequence[K, V].Flush"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Flush()\n"})}),"\n",(0,a.jsx)(n.p,{children:"Flush consumes all elements of the sequence."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].FoldValues"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfoldvalues",children:"Sequence[K, V].FoldValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) FoldValues(accumulator func(agg V, key K, value V) V) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FoldValues folds values with the first value as initial."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\tresult := sequence.FoldValues(func(agg string, key int, value string) string {\n\t\treturn agg + value\n\t})\n\n\tfmt.Println("Concatenated:", result.MustGet())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Concatenated: abc\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].FoldValuesRight"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vfoldvaluesright",children:"Sequence[K, V].FoldValuesRight"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) FoldValuesRight(accumulator func(agg V, key K, value V) V) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"FoldValuesRight folds values from right to left."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].ForEach"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vforeach",children:"Sequence[K, V].ForEach"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) ForEach(consumer Consumer[K, V])\n"})}),"\n",(0,a.jsx)(n.p,{children:"ForEach calls the consumer for each element."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\tvar result []string\n\tsequence.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 1:b, 2:c\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Get"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vget",children:"Sequence[K, V].Get"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Get(key K) optional.Elem[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Get returns the value associated with the key."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\n\texisting := sequence.Get(1)\n\tnotExisting := sequence.Get(5)\n\n\tfmt.Println("Value for key 1:", existing.MustGet())\n\tfmt.Println("Has value for key 5:", notExisting.IsPresent())\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Value for key 1: b\nHas value for key 5: false\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].IsEmpty"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-visempty",children:"Sequence[K, V].IsEmpty"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) IsEmpty() bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"IsEmpty returns true if the sequence is empty."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].IsNotEmpty"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-visnotempty",children:"Sequence[K, V].IsNotEmpty"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) IsNotEmpty() bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"IsNotEmpty returns true if the sequence is not empty."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Keys"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vkeys",children:"Sequence[K, V].Keys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Keys() iter.Seq[K]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Keys returns a sequence of keys."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\tkeys := sequence.Keys()\n\n\tseq.ForEach(keys, func(k int) {\n\t\tfmt.Println(k)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0\n1\n2\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Limit"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vlimit",children:"Sequence[K, V].Limit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Limit(n int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Limit is an alias for Take."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].None"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vnone",children:"Sequence[K, V].None"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) None(predicate Predicate[K, V]) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"None returns true if no element satisfies the predicate."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].NotContains"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vnotcontains",children:"Sequence[K, V].NotContains"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) NotContains(key K) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"NotContains returns true if the sequence does not contain the key."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].NotContainsPair"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vnotcontainspair",children:"Sequence[K, V].NotContainsPair"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) NotContainsPair(key K, value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"NotContainsPair returns true if the sequence does not contain the key-value pair."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].NotContainsValue"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vnotcontainsvalue",children:"Sequence[K, V].NotContainsValue"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) NotContainsValue(value V) bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"NotContainsValue returns true if the sequence does not contain the value."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Offset"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-voffset",children:"Sequence[K, V].Offset"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Offset(n int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Offset is an alias for Skip."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Prepend"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vprepend",children:"Sequence[K, V].Prepend"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Prepend(key K, value V) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Prepend prepends a key-value pair to the beginning of a sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("b", "c", "d"))\n\tprepended := sequence.Prepend(-1, "a")\n\n\tvar result []string\n\tprepended.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"-1:a, 0:b, 1:c, 2:d\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Repeat"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vrepeat",children:"Sequence[K, V].Repeat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Repeat(count int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Repeat is an alias for Cycle."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Reverse"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vreverse",children:"Sequence[K, V].Reverse"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Reverse() Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Reverse returns a new sequence with elements in reverse order."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\treversed := sequence.Reverse()\n\n\tvar result []string\n\treversed.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"2:c, 1:b, 0:a\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Skip"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vskip",children:"Sequence[K, V].Skip"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Skip(n int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Skip returns a new sequence that skips the first n elements."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c", "d", "e"))\n\tskipped := sequence.Skip(2)\n\n\tvar result []string\n\tskipped.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"2:c, 3:d, 4:e\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].SortComparingKeys"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vsortcomparingkeys",children:"Sequence[K, V].SortComparingKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) SortComparingKeys(compare func(K, K) int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"SortComparingKeys sorts the sequence by keys using a custom comparator."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].SortComparingValues"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vsortcomparingvalues",children:"Sequence[K, V].SortComparingValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) SortComparingValues(compare func(V, V) int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"SortComparingValues sorts the sequence by values using a custom comparator."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Take"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vtake",children:"Sequence[K, V].Take"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Take(n int) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Take returns a new sequence with only the first n elements."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c", "d", "e"))\n\ttaken := sequence.Take(3)\n\n\tvar result []string\n\ttaken.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 1:b, 2:c\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Tap"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vtap",children:"Sequence[K, V].Tap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Tap(consumer Consumer[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Tap calls the consumer for each element without changing the sequence."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tvar result []string\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c")).\n\t\tTap(func(k int, v string) {\n\t\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t\t})\n\n\tsequence.Flush()\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 1:b, 2:c\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].ToMap"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vtomap",children:"Sequence[K, V].ToMap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) ToMap(m map[K]V)\n"})}),"\n",(0,a.jsx)(n.p,{children:"ToMap converts the sequence to a map."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Union"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vunion",children:"Sequence[K, V].Union"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Union(other Sequence[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Union returns a new sequence that contains all distinct elements from both input sequences."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsq1 := seq2.AsSequence(seq2.Concat(seq2.Pair("a", 1), seq2.Pair("b", 2), seq2.Pair("c", 3)))\n\tsq2 := seq2.AsSequence(seq2.Concat(seq2.Pair("a", 1), seq2.Pair("d", 4), seq2.Pair("e", 5)))\n\n\tunion := sq1.Union(sq2)\n\n\tunion.ForEach(func(k string, v int) {\n\t\tfmt.Println(k, ":", v)\n\t})\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a : 1\nb : 2\nc : 3\nd : 4\ne : 5\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].UnionAll"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vunionall",children:"Sequence[K, V].UnionAll"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) UnionAll(other Sequence[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UnionAll returns a new sequence that contains all elements from both input sequences."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tseq1 := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\tseq2Inst := seq2.AsSequence(seq2.Of("c", "d", "e"))\n\n\tunionAll := seq1.UnionAll(seq2Inst)\n\n\tvar result []string\n\tunionAll.ForEach(func(k int, v string) {\n\t\tresult = append(result, fmt.Sprintf("%d:%s", k, v))\n\t})\n\n\tfmt.Println(strings.Join(result, ", "))\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0:a, 1:b, 2:c, 0:c, 1:d, 2:e\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Uniq"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vuniq",children:"Sequence[K, V].Uniq"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Uniq() Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Uniq returns a sequence with unique key-value pairs."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\t// Using FromMap to create a sequence with duplicate values\n\tsequence := seq2.AsSequence(seq2.Of("a", "a", "b", "b", "c"))\n\tunique := sequence.UniqValues()\n\n\tunique.ForEach(func(k int, v string) {\n\t\tfmt.Println(k, ":", v)\n\t})\n\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0 : a\n2 : b\n4 : c\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].UniqKeys"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vuniqkeys",children:"Sequence[K, V].UniqKeys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) UniqKeys() Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UniqKeys returns a sequence with unique keys."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].UniqValues"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vuniqvalues",children:"Sequence[K, V].UniqValues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) UniqValues() Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"UniqValues returns a sequence with unique values."}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Values"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vvalues",children:"Sequence[K, V].Values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Values() iter.Seq[V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Values returns a sequence of values."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Example"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\n\t"github.com/go-softwarelab/common/pkg/seq"\n\t"github.com/go-softwarelab/common/pkg/seq2"\n)\n\nfunc main() {\n\tsequence := seq2.AsSequence(seq2.Of("a", "b", "c"))\n\tvalues := sequence.Values()\n\n\tseq.ForEach(values, func(v string) {\n\t\tfmt.Println(v)\n\t})\n}\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"a\nb\nc\n"})})]}),"\n",(0,a.jsx)("a",{name:"Sequence[K, V].Where"}),"\n",(0,a.jsx)(n.h3,{id:"sequencek-vwhere",children:"Sequence[K, V].Where"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (s Sequence[K, V]) Where(predicate Predicate[K, V]) Sequence[K, V]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Where returns a new sequence with elements that satisfy the predicate."}),"\n",(0,a.jsx)("a",{name:"ValueMapper"}),"\n",(0,a.jsx)(n.h2,{id:"type-valuemapper",children:"type ValueMapper"}),"\n",(0,a.jsx)(n.p,{children:"ValueMapper is a function that takes Value a new Value."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type ValueMapper[V, R any] = func(V) R\n"})}),"\n",(0,a.jsx)("a",{name:"ValuePredicate"}),"\n",(0,a.jsx)(n.h2,{id:"type-valuepredicate",children:"type ValuePredicate"}),"\n",(0,a.jsx)(n.p,{children:"ValuePredicate is a function that is used to filter by value."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type ValuePredicate[E any] = ValueMapper[E, bool]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);